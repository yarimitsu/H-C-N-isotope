{
    "contents" : "# Clean up R\nrm(list=ls())\n\n# R libraries\nlibrary(rstan)\nlibrary(reshape2)\nlibrary(ggplot2)\n\nrstan_options(auto_write = TRUE)\noptions(mc.cores = parallel::detectCores())\n\n# R code\n# source(\"Simulator.R\")\n# source(\"Model.R\")\n\n# =====================================================================#\n# DATA\n# =====================================================================#\ndat <- read.csv(\"data/glacier_iso.csv\", header = TRUE)\ndH_obs <- as.vector(dat$d2H)\ndC_obs <- as.vector(dat$d13C)\ndN_obs <- as.vector(dat$d15N)\ndH_w <- dat$d2H_w\n#tau <- dat$TL\nsp <- factor(dat$Species, ordered = TRUE)\ntaxa <- c(1, 5, 3, 5, 4, 3, 3, 2, 2, 4, 3, 3, 4, 4, 6, 6, 6) #taxa-tissue type for each species group\ngrp <- as.numeric(sp)\nsp <- unique(grp)\ntx <- as.numeric(taxa)\nN <- nrow(dat) \nJ <- length(unique(grp))\nK <- 3 # number of sources\nM <- length(unique(taxa))\n#tau_g <- aggregate(tau, by = list(grp), FUN = mean)[2]\n#tau_g <- as.numeric(tau_g[1:J, 1]) - 1\ndN_g <- aggregate(dN_obs, by = list(grp), FUN = mean)[2]\ndN_g <- round(as.numeric(dN_g[1:J, 1]),2)\ndC_g <- aggregate(dC_obs, by = list(grp), FUN = mean)[2]\ndC_g <- round(as.numeric(dC_g[1:J, 1]),2)\ndH_w_g <- aggregate(dH_w, by = list(grp), FUN = mean)[2]\ndH_w_g <- as.numeric(dH_w_g[1:J, 1])\n\n\n#load(\"fit_CM.RData\")\n\n# =====================================================================#\n# SIMULATION\n# =====================================================================#\n# Initial.Values <- c(-23.7, -24.9, -19.1, -7.1, -113, -15, 1.626544, -14.256495, 7.616156, 2.044173, 1.728355, -8.700835, -6.765336, 7.443521, -6.809056, -6.449024, -5.089111, -1.374354, 0.875469, 5.106157)\n# Sim <- Model_Sim(Initial.Values, N, seed = 42)\n# dH_sim <- dH_obs <- Sim$dH_sim; dH_sim\n# dC_sim <- dC_obs <- Sim$dC_sim; dC_sim\n\n\n# =====================================================================#\n# STAN MODEL (MCMC)\n# =====================================================================#\n# Data\nisotope_dat <- list(N = N, J = J, K = K, M = M, grp = grp, \n                    dC_obs = dC_obs, dN_obs = dN_obs, dH_obs = dH_obs,\n                    dN_g = dN_g, dC_g = dC_g, dH_w = dH_w_g, tx = tx)\n\n\nisotope_init <- list(list(dN_base = 7.03, dC = c(-23.5, -19.0,  -24.0),\n                          dN = c(  3.6,   3.2,    3.5),\n                          dH = c( -7.1, -15.0, -115.0),\n                          phi = matrix(c(0.2,0.6,0.2), J, K),\n                          Delta_C = rep(0.5, M), Delta_N = rep(3.0, M), Delta_H = -163.0,\n                          omega = rep(0.23, J), fblki = 70,\n                          sigma_src = matrix(rep(0.5, 3), 3, K),\n                          sigma_frc = matrix(rep(1.0, 2), 2, J),\n                          sigma_frcH = 1,\n                          sigma_omega = rep(0.5, J), sigma_fblki = 1.0))\n\n\n\n# STAN model\n#mod <- stan_model(file = 'isotope6.stan')\nmod.CM <- stan_model(file = 'isotope7.stan')\n# Run MCMC\nwarmup <- 1e4\niter <- 1e5\nthin <- 90\ncat((iter-warmup)/thin, \"samples will be saved\\n\")\nfit_CM1 <- sampling(object = mod.CM, data = isotope_dat, init = isotope_init,\n                warmup = warmup, iter = iter, thin = thin, chains = 1)\n\nfit <- sampling(object = mod, data = isotope_dat, init = isotope_init,\n                warmup = warmup, iter = iter, thin = thin, chains = 1)\n\n# Plot model fit\nsource(\"Plot.R\")\n\nfit_CM <- fit_CM1\n\n#print(fit_CM1)\n#write.csv(summary(fit_CM), \"f.csv\")\n#save(fit_CM, file = \"fit_CM.RData\")\n\ntrace <- extract(fit_CM1)\ntau_post_in <- data.frame(tau = trace$tau)\ntau_post <- melt(data.frame(Sample = 1:nrow(tau_post_in), tau_post_in), id.vars = \"Sample\")\nhead(tau_post)\ntau_postmean <- as.vector(by(tau_post[, \"value\"], tau_post$variable, mean))\ntau_postsd <- as.vector(by(tau_post[, \"value\"], tau_post$variable, sd))\ntau_postm <- as.matrix(cbind(mean = round(tau_postmean,1), sd = round(tau_postsd,2)))\ntau_postm\n\ntrace <- extract(fit_CM1)\nphi_post_in <- data.frame(phi = trace$phi)\nphi_post <- melt(data.frame(Sample = 1:nrow(phi_post_in), phi_post_in), id.vars = \"Sample\")\nhead(phi_post)\nphi_postmedian <- as.vector(by(phi_post[, \"value\"], phi_post$variable, median))\nphi_postsd <- as.vector(by(phi_post[, \"value\"], phi_post$variable, sd))\nphi_postm <- as.matrix(cbind(Species = rep(levels(dat$Species)), ID = levels(phi_post$variable), median = round(phi_postmedian,2), sd = round(phi_postsd,2)))\nphi_postm\nphi_",
    "created" : 1450076545083.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2523760494",
    "id" : "48941213",
    "lastKnownWriteTime" : 1450045207,
    "path" : "~/GitHub/H-C-N-isotope/Main.R",
    "project_path" : "Main.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}