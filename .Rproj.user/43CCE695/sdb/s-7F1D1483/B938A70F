{
    "contents" : "# Isotope model for marine, coastal and freshwater\n\ndata {\n  int<lower=1> N;   // number of observations\n  int<lower=1> J;   // number of groups\n  int<lower=1> K;   // number of sources\n  int M;            // number of taxa  \n  int tx [J];       // taxa of each species\n  int grp[N];       // species or genus of each observation\n  vector[N] dC_obs; // data: 13C of consumer tissues\n  vector[N] dN_obs; // data: 15N of consumer tissues\n  vector[N] dH_obs; // data: 2H of consumer tissues\n  vector[J] dN_g;   // data: mean 15N of each group\n  vector[J] dH_w;   // covariate: 2H of water\n}\n\nparameters {\n  real dN_base;                        // 15N of primary consumers\n  real dC1;                            // 13C marine source\n  real dC2;                            // 13C coastal source\n  real <upper = -22> dC3;              // 13C freshwater source\n  real dN[K];                          // 15N marine, coastal and freshwater sources\n  real dH[K];                          // 2H marine, coastal and freshwater sources\n  simplex[K] phi[J];                   // phi is defined as a unit simplex and thus sum(phi)=1\n  real <upper = 2> Delta_C[M];         // trophic fractionation of C\n  real Delta_N[M];                     // trophic fractionation of N\n  real Delta_H;                        // trophic fractionation of H\n  real<lower=0, upper = 0.6> omega[J]; // proportion of 2H due to ambient water dH_w\n  real<lower=0> fblki;             // blki fractionation\n  real<lower=0> sigma_src[3,K];    // sigma source parameters marine, coastal, freshwater for dC, dH, dN \n  real<lower=0> sigma_frc[2,J];    // sigma C_tot, N_tot\n  real<lower=0> sigma_frcH;        // sigma Delta_H\n  real<lower=0> sigma_omega[J];    // sigma omega\n  real<lower=0> sigma_fblki;       // sigma blki fractionation\n\n}\ntransformed parameters {\n  real C_tot[J];\n  real N_tot[J];\n  real dC_exp[J];\n  real dN_exp[J];\n  real dH_exp[J];\n  real sigma_C[J];\n  real sigma_N[J];\n  real sigma_H[J];\n  real <lower = 1.8, upper = 5> tau[J];\n\n  for (j in 1:J) {\n    tau[j] <- 2 + (dN_g[j] - dN_base)/Delta_N[tx[j]];\n    C_tot[j]  <- Delta_C[tx[j]] * (tau[j]-1);\n    N_tot[j]  <- Delta_N[tx[j]] * (tau[j]-1); \n    dC_exp[j] <- (phi[j][1] * (dC1 + C_tot[j])) + \n                 (phi[j][2] * (dC2 + C_tot[j])) + \n                 (phi[j][3] * (dC3 + C_tot[j]));\n    dN_exp[j] <- (phi[j][1] * (dN[1] + N_tot[j])) + \n                 (phi[j][2] * (dN[2] + N_tot[j])) + \n                 (phi[j][3] * (dN[3] + N_tot[j]));\n   }\n\n\n  dH_exp[1] <-   (omega[1] * dH_w[1]) + ((1 - omega[1]) * (\n                 (phi[1][1] * (dH[1] + Delta_H)) + \n                 (phi[1][2] * (dH[2] + Delta_H)) + \n                 (phi[1][3] * (dH[3] + Delta_H)))) + fblki;\n  \n  for (j in 2:J) {\n    dH_exp[j] <- (omega[j] * dH_w[j]) + ((1 - omega[j]) * (\n                 (phi[j][1] * (dH[1] + Delta_H)) + \n                 (phi[j][2] * (dH[2] + Delta_H)) + \n                 (phi[j][3] * (dH[3] + Delta_H))));\n    }\n  for (j in 1:J) {\n    sigma_C[j] <- sqrt((pow(phi[j][1],2) * (pow(sigma_src[1,1],2) + pow(sigma_frc[1,j],2))) + \n                       (pow(phi[j][2],2) * (pow(sigma_src[1,2],2) + pow(sigma_frc[1,j],2))) + \n                       (pow(phi[j][3],2) * (pow(sigma_src[1,3],2) + pow(sigma_frc[1,j],2))));\n    sigma_N[j] <- sqrt((pow(phi[j][1],2) * (pow(sigma_src[2,1],2) + pow(sigma_frc[2,j],2))) + \n                       (pow(phi[j][2],2) * (pow(sigma_src[2,2],2) + pow(sigma_frc[2,j],2))) + \n                       (pow(phi[j][3],2) * (pow(sigma_src[2,3],2) + pow(sigma_frc[2,j],2))));\n     }\n  \n    sigma_H[1] <- sqrt((pow(phi[1][1],2) * (pow(sigma_src[3,1],2) + pow(sigma_frcH,2) + pow(sigma_omega[1],2) + pow(sigma_fblki,2))) + \n                       (pow(phi[1][2],2) * (pow(sigma_src[3,2],2) + pow(sigma_frcH,2) + pow(sigma_omega[1],2) + pow(sigma_fblki,2))) + \n                       (pow(phi[1][3],2) * (pow(sigma_src[3,3],2) + pow(sigma_frcH,2) + pow(sigma_omega[1],2) + pow(sigma_fblki,2))));\n\n  for (j in 2:J) {\n    sigma_H[j] <- sqrt((pow(phi[j][1],2) * (pow(sigma_src[3,1],2) + pow(sigma_frcH,2) + pow(sigma_omega[j],2))) + \n                       (pow(phi[j][2],2) * (pow(sigma_src[3,2],2) + pow(sigma_frcH,2) + pow(sigma_omega[j],2))) + \n                       (pow(phi[j][3],2) * (pow(sigma_src[3,3],2) + pow(sigma_frcH,2) + pow(sigma_omega[j],2))));\n     }\n}\n\nmodel {\n  int jj;\n  int ii;\n \n  real eps_C;\n  real eps_H;\n  real eps_N;\n\n  // Priors\n  dN_base ~ normal(7.03, 1.38);   // copepod 15N, measured\n  dC1 ~ normal(-24.2, 0.8);     // Offshore marine, <100m Bulk POM (Wu et al 1999)\n  dC2 ~ normal(-19.1, 1.2);     // Coastal, measured\n  dC3 ~ normal(-26.4, 1.47);    // Freshwater POM (Geary 1988 p 80)\n  dN[1] ~ normal(3.6, 0.2);       // offshore marine SPOM (Wu et al 1997, p 298)\n  dN[2] ~ normal(3.1, 0.6);       // coastal, measured POM\n  dN[3] ~ normal(4.4, 3.9);       // freshwater, measured POM \n  dH[1] ~ normal(-7.4, 1.0);      // Marine, measured\n  dH[2] ~ normal(-15, 20);        // coastal, measured\n  dH[3] ~ normal(-113.0, 10.9);   // freshwater, measured\n  Delta_C[M] ~ normal(0.4, 1.3);     // 13C fractionation per trophic level (Post 2002)\n  //Delta_C[M] ~ uniform(0, 1);\n  Delta_N[1] ~ normal(3.0, 0.9);  //bird.liver\n  Delta_N[2] ~ normal(2.2, 0.7);  //bird.blood\n  Delta_N[3] ~ normal(3.2, 1.9);  //fish\n  Delta_N[4] ~ normal(2.3, 0.9);  //macrozoop\n  Delta_N[5] ~ normal(2.3, 0.9);  //microzoop\n  Delta_N[6] ~ normal(2.2,1.1);   //YOYfish\n  Delta_H ~ normal(-163.7, 27);   // 2H fractionation between water and phytoplankton\n  fblki ~ uniform(30,150);\n  sigma_src[1][K] ~ uniform(0.0,10000);\n  sigma_src[2][K] ~ uniform(0.0,10000);\n  sigma_src[3][K] ~ uniform(0.0,10000);\n  sigma_frcH ~ uniform(0.0,10000);\n  sigma_omega[J] ~ uniform(0.0,10000);\n  sigma_fblki ~ uniform(0.0,10000);\n  omega[1] ~ normal(1-pow((1-0.23), tau[1]-1), 0.02);\n  //omega[1] ~ uniform(0.18, 50);\n  omega[2] ~ normal(0.23, 0.03);\n  omega[3] ~ normal(0.33, 0.1);\n  omega[4] ~ normal(0.23, 0.03);\n  omega[5] ~ normal(0.23, 0.03);\n  omega[6] ~ normal(0.33, 0.1);\n  omega[7] ~ normal(0.33, 0.1);\n  omega[8] ~ normal(1-pow((1-0.23), tau[8]-1), 0.02);\n  omega[9] ~ normal(1-pow((1-0.23), tau[9]-1), 0.02);\n  //omega[8] ~ uniform(0.18, 0.50);\n  //omega[9] ~ uniform(0.18, 0.50);\n  omega[10] ~ normal(0.23, 0.03);\n  omega[11] ~ normal(0.33, 0.1);\n  omega[12] ~ normal(0.33, 0.1);\n  omega[13] ~ normal(0.23, 0.03);\n  omega[14] ~ normal(0.23, 0.03);\n  omega[15] ~ normal(0.33, 0.1);\n  omega[16] ~ normal(0.33, 0.1);\n  omega[17] ~ normal(0.33, 0.1);\n\n  for (j in 1:J) {\n    sigma_frc[1,j] ~ uniform(0.0,10000);\n    sigma_frc[2,j] ~ uniform(0.0,10000);\n  }\n\n  // Likelihood\n  for (i in 1:N) {\n    jj <- grp[i];\n    eps_C <- dC_obs[i] - dC_exp[jj];\n    eps_N <- dN_obs[i] - dN_exp[jj];\n    eps_H <- dH_obs[i] - dH_exp[jj];\n    eps_C ~ normal(0.0, sigma_C[jj]);\n    eps_N ~ normal(0.0, sigma_N[jj]);\n    eps_H ~ normal(0.0, sigma_H[jj]);\n  }\n}\ngenerated quantities {\n  int jj;\n  real dH_adj[N]; // d2H in consumer due to diet\n  real srcC[J,K]; // fractionation corrected carbon sources\n  real srcN[J,K]; // fractionation corrected nitrogen sources\n  real srcH[J,K]; // fractionation corrected hydrogen sources\n\n for (i in 1:26) { \n    dH_adj[i] <- (dH_obs[i] - fblki - (omega[1] * dH_w[1]))/ (1 - omega[1]);\n  }\n \n  for (i in 27:N) {\n    jj <- grp[i];\n    dH_adj[i] <- (dH_obs[i] - (omega[jj] * dH_w[jj]))/(1 - omega[jj]);\n  }\n  \n  for (j in 1:J) {\n    for (k in 1:K) {\n      srcC[j,1] <- dC1 + C_tot[j];// + normal_rng(0.0, sigma_C[j]);\n      srcC[j,2] <- dC2 + C_tot[j];// + normal_rng(0.0, sigma_C[j]);\n      srcC[j,3] <- dC3 + C_tot[j];// + normal_rng(0.0, sigma_C[j]);\n      srcN[j,k] <- dN[k] + N_tot[j];// + normal_rng(0.0, sigma_N[j]);\n      srcH[j,k] <- dH[k] + Delta_H;// + normal_rng(0.0, sigma_H[j]);\n    }\n }\n}\n",
    "created" : 1450079846123.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3022145890",
    "id" : "B938A70F",
    "lastKnownWriteTime" : 1450726230,
    "path" : "~/GitHub/H-C-N-isotope/isotope7.stan",
    "project_path" : "isotope7.stan",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "text"
}