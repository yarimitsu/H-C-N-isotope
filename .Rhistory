library(rstan)
library(reshape2)
library(ggplot2)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
dat <- read.csv("data/glacier_iso.csv", header = TRUE)
dH_obs <- as.vector(dat$d2H)
dC_obs <- as.vector(dat$d13C)
dN_obs <- as.vector(dat$d15N)
dH_w <- dat$d2H_w
#tau <- dat$TL
sp <- factor(dat$Species, ordered = TRUE)
taxa <- c(1, 5, 3, 5, 4, 3, 3, 2, 2, 4, 3, 3, 4, 4, 6, 6, 6) #taxa-tissue type for each species group
grp <- as.numeric(sp)
sp <- unique(grp)
tx <- as.numeric(taxa)
N <- nrow(dat)
J <- length(unique(grp))
K <- 3 # number of sources
M <- length(unique(taxa))
#tau_g <- aggregate(tau, by = list(grp), FUN = mean)[2]
#tau_g <- as.numeric(tau_g[1:J, 1]) - 1
dN_g <- aggregate(dN_obs, by = list(grp), FUN = mean)[2]
dN_g <- round(as.numeric(dN_g[1:J, 1]),2)
dC_g <- aggregate(dC_obs, by = list(grp), FUN = mean)[2]
dC_g <- round(as.numeric(dC_g[1:J, 1]),2)
dH_w_g <- aggregate(dH_w, by = list(grp), FUN = mean)[2]
dH_w_g <- as.numeric(dH_w_g[1:J, 1])
isotope_dat <- list(N = N, J = J, K = K, M = M, grp = grp,
dC_obs = dC_obs, dN_obs = dN_obs, dH_obs = dH_obs,
dN_g = dN_g, dC_g = dC_g, dH_w = dH_w_g, tx = tx)
isotope_init <- list(list(dN_base = 7.03, dC = c(-23.5, -19.0,  -24.0),
dN = c(  3.6,   3.2,    3.5),
dH = c( -7.1, -15.0, -115.0),
phi = matrix(c(0.2,0.6,0.2), J, K),
Delta_C = rep(0.5, M), Delta_N = rep(3.0, M), Delta_H = -163.0,
omega = rep(0.23, J), fblki = 70,
sigma_src = matrix(rep(0.5, 3), 3, K),
sigma_frc = matrix(rep(1.0, 2), 2, J),
sigma_frcH = 1,
sigma_omega = rep(0.5, J), sigma_fblki = 1.0))
mod.CM <- stan_model(file = 'isotope7.stan')
rm(list=ls())
library(rstan)
library(reshape2)
library(ggplot2)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
dat <- read.csv("data/glacier_iso.csv", header = TRUE)
dH_obs <- as.vector(dat$d2H)
dC_obs <- as.vector(dat$d13C)
dN_obs <- as.vector(dat$d15N)
dH_w <- dat$d2H_w
#tau <- dat$TL
sp <- factor(dat$Species, ordered = TRUE)
taxa <- c(1, 5, 3, 5, 4, 3, 3, 2, 2, 4, 3, 3, 4, 4, 6, 6, 6) #taxa-tissue type for each species group
grp <- as.numeric(sp)
sp <- unique(grp)
tx <- as.numeric(taxa)
N <- nrow(dat)
J <- length(unique(grp))
K <- 3 # number of sources
M <- length(unique(taxa))
#tau_g <- aggregate(tau, by = list(grp), FUN = mean)[2]
#tau_g <- as.numeric(tau_g[1:J, 1]) - 1
dN_g <- aggregate(dN_obs, by = list(grp), FUN = mean)[2]
dN_g <- round(as.numeric(dN_g[1:J, 1]),2)
dC_g <- aggregate(dC_obs, by = list(grp), FUN = mean)[2]
dC_g <- round(as.numeric(dC_g[1:J, 1]),2)
dH_w_g <- aggregate(dH_w, by = list(grp), FUN = mean)[2]
dH_w_g <- as.numeric(dH_w_g[1:J, 1])
isotope_dat <- list(N = N, J = J, K = K, M = M, grp = grp,
dC_obs = dC_obs, dN_obs = dN_obs, dH_obs = dH_obs,
dN_g = dN_g, dC_g = dC_g, dH_w = dH_w_g, tx = tx)
isotope_init <- list(list(dN_base = 7.03, dC = c(-23.5, -19.0,  -24.0),
dN = c(  3.6,   3.2,    3.5),
dH = c( -7.1, -15.0, -115.0),
phi = matrix(c(0.2,0.6,0.2), J, K),
Delta_C = rep(0.5, M), Delta_N = rep(3.0, M), Delta_H = -163.0,
omega = rep(0.23, J), fblki = 70,
sigma_src = matrix(rep(0.5, 3), 3, K),
sigma_frc = matrix(rep(1.0, 2), 2, J),
sigma_frcH = 1,
sigma_omega = rep(0.5, J), sigma_fblki = 1.0))
mod.CM <- stan_model(file = 'isotope7.stan')
load("fit_CM1.RData")
library(rstan)
library(reshape2)
library(ggplot2)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
dat <- read.csv("data/glacier_iso.csv", header = TRUE)
dH_obs <- as.vector(dat$d2H)
dC_obs <- as.vector(dat$d13C)
dN_obs <- as.vector(dat$d15N)
dH_w <- dat$d2H_w
#tau <- dat$TL
sp <- factor(dat$Species, ordered = TRUE)
taxa <- c(1, 5, 3, 5, 4, 3, 3, 2, 2, 4, 3, 3, 4, 4, 6, 6, 6) #taxa-tissue type for each species group
grp <- as.numeric(sp)
sp <- unique(grp)
tx <- as.numeric(taxa)
N <- nrow(dat)
J <- length(unique(grp))
K <- 3 # number of sources
M <- length(unique(taxa))
#tau_g <- aggregate(tau, by = list(grp), FUN = mean)[2]
#tau_g <- as.numeric(tau_g[1:J, 1]) - 1
dN_g <- aggregate(dN_obs, by = list(grp), FUN = mean)[2]
dN_g <- round(as.numeric(dN_g[1:J, 1]),2)
dC_g <- aggregate(dC_obs, by = list(grp), FUN = mean)[2]
dC_g <- round(as.numeric(dC_g[1:J, 1]),2)
dH_w_g <- aggregate(dH_w, by = list(grp), FUN = mean)[2]
dH_w_g <- as.numeric(dH_w_g[1:J, 1])
source("Plot.R")
i <- grepl("Delta_C", post$variable)
d1 <- post[i,]
p <- ggplot(d1, aes(value)) +
facet_wrap(~Labs, scales = "free", ncol = 3) +
geom_histogram(aes(y = ..density..)) + ylab("Probability Density\n") + xlab(expression(paste("\nDelta C (\u2030)")))
j <- grepl("Delta_C", dp$variable)
dp1 <- dp[i,]
head(dp1)
for (i in 1:M){
dp1$Labs[dp1$variable %in%  paste0("Delta_C.", i)] <- levels(factor(dat$Taxa, ordered = TRUE))[i]
}
p <- p + geom_line(data = dp1, aes(x = x, y = value1), color = "red")
png("figs/mcmc_par_hist_DeltaC.png", width = 8, height = 6, units = "in", res = 300)
plot(p)
dev.off()
for (i in 1:M) {
post$Labs[post$variable %in%  paste0("Delta_C.",i)] <- levels(factor(dat$Taxa, ordered = TRUE))[i]
post$Labs[post$variable %in%  paste0("Delta_N.",i)] <- levels(factor(dat$Taxa, ordered = TRUE))[i]
}
pri <- c(function(x){ dnorm(x, -24.2, 0.8) },      # dC.1 marine
function(x){ dnorm(x, -19.1, 1.2) },      # dC.2 coastal
function(x){ dnorm(x, -26.4, 1.47) },     # dC.3 freshwater
function(x){ dnorm(x, 3.6, 0.2) },        # dN.1 marine
function(x){ dnorm(x, 3.1, 0.6) },        # dN.2 coastal
function(x){ dnorm(x, 4.4, 3.9) },        # dN.3 freshwater
function(x){ dnorm(x, -7.4, 1.0) },       # dH.1 marine
function(x){ dnorm(x, -15.3, 3.6) },      # dH.2 coastal
function(x){ dnorm(x, -113.0, 10.9) },    # dH.3 freshwater
replicate(M, function(x){ dnorm(x, 0.4, 1.3) }),  # Delta_C
#function(x){ dnorm(x, 0.4, 1.3) },      # Delta_C
function(x){ dnorm(x, 3.0, 0.9) },      # Delta_N
function(x){ dnorm(x, 2.2, 0.7) },      # Delta_N
function(x){ dnorm(x, 3.2, 1.9) },      # Delta_N
function(x){ dnorm(x, 2.3, 0.9) },      # Delta_N
function(x){ dnorm(x, 2.3, 0.9) },     # Delta_N
function(x){ dnorm(x, 2.2, 1.1) },      # Delta_N
function(x){ dnorm(x, -163.7, 27.0) },   # Delta_H
function(x){ dunif(x, 30, 150) },         # fblki
#function(x){ dnorm(x, blki_omega, 0.02) },# omega BLKI
function(x){ dunif(x, 0.18, 0.50) },
function(x){ dnorm(x, 0.23, 0.03) },      # omega Bulk zoop
function(x){ dnorm(x, 0.33, 0.1) },       # omega capelin
function(x){ dnorm(x, 0.23, 0.03) },      # omega copepod
function(x){ dnorm(x, 0.23, 0.03) },      # omega epacifica
function(x){ dnorm(x, 0.33, 0.1) },       # omega eulachon
function(x){ dnorm(x, 0.33, 0.1) },       # omega herring
#function(x){ dnorm(x, kimu_omega, 0.02) },    # omega KIMU
#function(x){ dnorm(x, mamu_omega, 0.02) },   # omega MAMU
function(x){ dunif(x, 0.18, 0.50) },
function(x){ dunif(x, 0.18, 0.50) },
function(x){ dnorm(x, 0.23, 0.03) },  # omega neomysis
function(x){ dnorm(x, 0.33, 0.1) },   # omega pollock
function(x){ dnorm(x, 0.33, 0.1) },   # omega sandlance
function(x){ dnorm(x, 0.23, 0.03) },  # omega T libellula
function(x){ dnorm(x, 0.23, 0.03) },  # omega Thysanoessa
function(x){ dnorm(x, 0.33, 0.1) },   # omega YOY capelin
function(x){ dnorm(x, 0.33, 0.1) },   # omega YOY herring
function(x){ dnorm(x, 0.33, 0.1) },   # omega YOY pollock
replicate(J, function(x){NA}),                        # tau
replicate(3*J, function(x){ NA }),                    # phis
function(x){ dunif(x, 0.0, 10000)},                   # sigma_fblki
replicate(2*J, function(x){ dunif(x, 0.0, 10000) }),  # sigma_frc
function(x){ dunif(x, 0.0, 10000) },    # sigma_frcH
replicate(3*K, function(x){ dunif(x, 0.0, 10000) }),  # sigma_src
function(x){ NA }                                     # lp
)
rm(list=ls())
dat <- read.csv("data/glacier_iso.csv", header = TRUE)
dH_obs <- as.vector(dat$d2H)
dC_obs <- as.vector(dat$d13C)
dN_obs <- as.vector(dat$d15N)
dH_w <- dat$d2H_w
#tau <- dat$TL
sp <- factor(dat$Species, ordered = TRUE)
taxa <- c(1, 5, 3, 5, 4, 3, 3, 2, 2, 4, 3, 3, 4, 4, 6, 6, 6) #taxa-tissue type for each species group
grp <- as.numeric(sp)
sp <- unique(grp)
tx <- as.numeric(taxa)
N <- nrow(dat)
J <- length(unique(grp))
K <- 3 # number of sources
M <- length(unique(taxa))
#tau_g <- aggregate(tau, by = list(grp), FUN = mean)[2]
#tau_g <- as.numeric(tau_g[1:J, 1]) - 1
dN_g <- aggregate(dN_obs, by = list(grp), FUN = mean)[2]
dN_g <- round(as.numeric(dN_g[1:J, 1]),2)
dC_g <- aggregate(dC_obs, by = list(grp), FUN = mean)[2]
dC_g <- round(as.numeric(dC_g[1:J, 1]),2)
dH_w_g <- aggregate(dH_w, by = list(grp), FUN = mean)[2]
dH_w_g <- as.numeric(dH_w_g[1:J, 1])
load("fit_CM1.RData")
source("Plot.R")
pri <- c(function(x){ dnorm(x, -24.2, 0.8) },      # dC.1 marine
function(x){ dnorm(x, -19.1, 1.2) },      # dC.2 coastal
function(x){ dnorm(x, -26.4, 1.47) },     # dC.3 freshwater
function(x){ dnorm(x, 3.6, 0.2) },        # dN.1 marine
function(x){ dnorm(x, 3.1, 0.6) },        # dN.2 coastal
function(x){ dnorm(x, 4.4, 3.9) },        # dN.3 freshwater
function(x){ dnorm(x, -7.4, 1.0) },       # dH.1 marine
function(x){ dnorm(x, -15.3, 3.6) },      # dH.2 coastal
function(x){ dnorm(x, -113.0, 10.9) },    # dH.3 freshwater
replicate(M, function(x){ dnorm(x, 0.4, 1.3) }),  # Delta_C
#function(x){ dnorm(x, 0.4, 1.3) },      # Delta_C
function(x){ dnorm(x, 3.0, 0.9) },      # Delta_N
function(x){ dnorm(x, 2.2, 0.7) },      # Delta_N
function(x){ dnorm(x, 3.2, 1.9) },      # Delta_N
function(x){ dnorm(x, 2.3, 0.9) },      # Delta_N
function(x){ dnorm(x, 2.3, 0.9) },     # Delta_N
function(x){ dnorm(x, 2.2, 1.1) },      # Delta_N
function(x){ dnorm(x, -163.7, 27.0) },   # Delta_H
function(x){ dunif(x, 30, 150) },         # fblki
function(x){ dnorm(x, blki_omega, 0.02) },# omega BLKI
#function(x){ dunif(x, 0.18, 0.50) },
function(x){ dnorm(x, 0.23, 0.03) },      # omega Bulk zoop
function(x){ dnorm(x, 0.33, 0.1) },       # omega capelin
function(x){ dnorm(x, 0.23, 0.03) },      # omega copepod
function(x){ dnorm(x, 0.23, 0.03) },      # omega epacifica
function(x){ dnorm(x, 0.33, 0.1) },       # omega eulachon
function(x){ dnorm(x, 0.33, 0.1) },       # omega herring
function(x){ dnorm(x, kimu_omega, 0.02) },    # omega KIMU
function(x){ dnorm(x, mamu_omega, 0.02) },   # omega MAMU
#function(x){ dunif(x, 0.18, 0.50) },
#function(x){ dunif(x, 0.18, 0.50) },
function(x){ dnorm(x, 0.23, 0.03) },  # omega neomysis
function(x){ dnorm(x, 0.33, 0.1) },   # omega pollock
function(x){ dnorm(x, 0.33, 0.1) },   # omega sandlance
function(x){ dnorm(x, 0.23, 0.03) },  # omega T libellula
function(x){ dnorm(x, 0.23, 0.03) },  # omega Thysanoessa
function(x){ dnorm(x, 0.33, 0.1) },   # omega YOY capelin
function(x){ dnorm(x, 0.33, 0.1) },   # omega YOY herring
function(x){ dnorm(x, 0.33, 0.1) },   # omega YOY pollock
replicate(J, function(x){NA}),                        # tau
replicate(3*J, function(x){ NA }),                    # phis
function(x){ dunif(x, 0.0, 10000)},                   # sigma_fblki
replicate(2*J, function(x){ dunif(x, 0.0, 10000) }),  # sigma_frc
function(x){ dunif(x, 0.0, 10000) },    # sigma_frcH
replicate(3*K, function(x){ dunif(x, 0.0, 10000) }),  # sigma_src
function(x){ NA }                                     # lp
)
for (ii in 1:ncol(xx)) {
dp[,ii] <- pri[[ii]](xx[,ii])
}
xx <- melt(xx)
dp <- melt(dp)
dp$x <- xx$value
names(dp) <- c("Var1","variable","value1","x")
dp$Species <- NA
dp$Labs <- NA
for (i in 1:J)
{
dp$Species[dp$variable %in% paste0("tau.",i)] <- levels(factor(dat$Species, ordered = TRUE))[i]
dp$Species[dp$variable %in% paste0("phi.",i,".1")] <- levels(factor(dat$Species, ordered = TRUE))[i]
dp$Species[dp$variable %in% paste0("phi.",i,".2")] <- levels(factor(dat$Species, ordered = TRUE))[i]
dp$Species[dp$variable %in% paste0("phi.",i,".3")] <- levels(factor(dat$Species, ordered = TRUE))[i]
dp$Species[dp$variable %in% paste0("omega.",i)] <- levels(factor(dat$Species, ordered = TRUE))[i]
dp$Species[dp$variable %in% paste0("sigma_frc.1.",i)] <- levels(factor(dat$Species, ordered = TRUE))[i]
dp$Species[dp$variable %in% paste0("sigma_frc.2.",i)] <- levels(factor(dat$Species, ordered = TRUE))[i]
dp$Species[dp$variable %in%  paste0("sigma_frc.1", i)] <- levels(factor(dat$Species, ordered = TRUE))[i]
dp$Species[dp$variable %in%  paste0("sigma_frc.2", i)] <- levels(factor(dat$Species, ordered = TRUE))[i]
}
for (ii in 1:ncol(xx)) {
dp[,ii] <- pri[[ii]](xx[,ii])
}
rm(list=ls())
library(rstan)
library(reshape2)
library(ggplot2)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
dat <- read.csv("data/glacier_iso.csv", header = TRUE)
dH_obs <- as.vector(dat$d2H)
dC_obs <- as.vector(dat$d13C)
dN_obs <- as.vector(dat$d15N)
dH_w <- dat$d2H_w
#tau <- dat$TL
sp <- factor(dat$Species, ordered = TRUE)
taxa <- c(1, 5, 3, 5, 4, 3, 3, 2, 2, 4, 3, 3, 4, 4, 6, 6, 6) #taxa-tissue type for each species group
grp <- as.numeric(sp)
sp <- unique(grp)
tx <- as.numeric(taxa)
N <- nrow(dat)
J <- length(unique(grp))
K <- 3 # number of sources
M <- length(unique(taxa))
#tau_g <- aggregate(tau, by = list(grp), FUN = mean)[2]
#tau_g <- as.numeric(tau_g[1:J, 1]) - 1
dN_g <- aggregate(dN_obs, by = list(grp), FUN = mean)[2]
dN_g <- round(as.numeric(dN_g[1:J, 1]),2)
dC_g <- aggregate(dC_obs, by = list(grp), FUN = mean)[2]
dC_g <- round(as.numeric(dC_g[1:J, 1]),2)
dH_w_g <- aggregate(dH_w, by = list(grp), FUN = mean)[2]
dH_w_g <- as.numeric(dH_w_g[1:J, 1])
load("fit_CM2.RData")
mod.CM <- stan_model(file = 'isotope7.stan')
source("Plot.R")
fit_CM <- fit_CM2
source("Plot.R")
mod <- stan_model(file = 'isotope7.stan')
warmup <- 1e4
iter <- 1e5
thin <- 90
cat((iter-warmup)/thin, "samples will be saved\n")
fit <- sampling(object = mod, data = isotope_dat, init = isotope_init,
warmup = warmup, iter = iter, thin = thin, chains = 1)
isotope_dat <- list(N = N, J = J, K = K, M = M, grp = grp,
dC_obs = dC_obs, dN_obs = dN_obs, dH_obs = dH_obs,
dN_g = dN_g, dC_g = dC_g, dH_w = dH_w_g, tx = tx)
isotope_init <- list(list(dN_base = 7.03, dC = c(-23.5, -19.0,  -24.0),
dN = c(  3.6,   3.2,    3.5),
dH = c( -7.1, -15.0, -115.0),
phi = matrix(c(0.2,0.6,0.2), J, K),
Delta_C = rep(0.5, M), Delta_N = rep(3.0, M), Delta_H = -163.0,
omega = rep(0.23, J), fblki = 70,
sigma_src = matrix(rep(0.5, 3), 3, K),
sigma_frc = matrix(rep(1.0, 2), 2, J),
sigma_frcH = 1,
sigma_omega = rep(0.5, J), sigma_fblki = 1.0))
warmup <- 1e4
iter <- 1e5
thin <- 90
cat((iter-warmup)/thin, "samples will be saved\n")
fit <- sampling(object = mod, data = isotope_dat, init = isotope_init,
warmup = warmup, iter = iter, thin = thin, chains = 1)
